class Game {
    field Menu menu; // menu instance
    field Questions list; // array of questions
    field Array askedQuestions; // stores the indexes of questions that were already displayed on screen
    field Animation anim; // animation instance
    field int place; // flag for key movements
    field int score; // score earned
    field int askedQuestionsIndex; // pointer to the next free slot inside the askedQuestions array


    constructor Game new() {
        let menu = Menu.new(); // initializes menu instance
        let list = Questions.new(); // initializes questions array
        let anim = Animation.new(); // initializes animation instance
        
        let askedQuestions = Array.new(list.getSize()); // initialize the array of asked questions
        let askedQuestionsIndex = 0; // set index to 0 as no questions were asked yet

        let place = 1; // default starting key selection is set to the leftmost top answer button
        let score = 0; // starting score is 0

        return this;
    }

    // method to dispose a game object
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    // MAIN GAME LOGIC
    // here everything happens: key movements, animations, question and answer displays, game over screens and more.
    method void run() {
        var char key; // the key currently presssed by the user
        var boolean exit; // check if user exited the game
        var int seed; // seed we feed the pseudo random class
        var int randomIndex; // random we got from the pseudo random class
        var Question q; // question to be displayed
        var boolean enteredMenu; // start main menu once
        var boolean hasAnswered; // flag to check if user answered the question
        var int chooseFromMenu; // 1 - play game, 2 - instructions, and 3 - credits.

        let place = 1;
        let exit = false;

        let menu = Menu.new(); // create an instance of the menu screen
        let chooseFromMenu = menu.run(); // display menu
        let seed = menu.getSeed(); // initializes seed for random

        do Random.setSeed(seed); // random class shenenigans
        let randomIndex = Random.rand(); // get the actual random number after setting the seed
        let randomIndex = Utils.mod(randomIndex, list.getSize()); // mod the number we got with the number of questions so we'll get correct indexes

        do Screen.clearScreen();
        do drawGrid(); // draw question grid

        let askedQuestionsIndex = 0;
        let hasAnswered = false;

        let q = list.getQuestion(randomIndex); // Fetch question
        do list.drawQuestion(q); // Display question on screen

        while (~exit) { // run the game

            if (hasAnswered) { // Only fetch a new question if the previous one was answered
                do clearQuestion(); // clear previous question
                do clearAnswers(); // clear previous answers
                let askedQuestions[askedQuestionsIndex] = randomIndex; // Mark question as asked
                let askedQuestionsIndex = askedQuestionsIndex + 1; // Increment pointer

                while (wasAsked(randomIndex)) { // Ensure unique question
                    let randomIndex = Random.rand();
                    let randomIndex = Utils.mod(randomIndex, list.getSize()); // randomIndex % number of questions
                }

                do q.dispose(); // delete the answered question

                let q = list.getQuestion(randomIndex); // Fetch question
                do list.drawQuestion(q); // Display question

                let hasAnswered = false; // Reset flag until user answers
            }

            while (key = 0) { // while the user has not pressed any key
                let key = Keyboard.keyPressed();
            }

            // player clicks an answer
            if (key = 128) { // enter key
                if (q.isCorrect(place - 1)) { // player clicked on the correct answer (place starts from 1 and answers array from 0, thus the -1 to standarize it)
                    if (score = 9) { // player reached 9 correctly answered questions and reached a million dollars -> finish the game
                        do gameOver();
                    }
                    let score = score + 1;

                    do scoreBarUpdate();
                } else {
                    let exit = true;
                    do gameOver();
                }
                let hasAnswered = true;
            }

            // ANSWER SELECTION MOVEMENTS
            if (key = 131) {  // up arrow is pressed
                if (place = 3) {
                    do eraseMark();
                    let place = 1;
                    do markBox();
                }
                if (place = 4){
                    do eraseMark();
                    let place = 2;
                    do markBox();
                }
            }   

            if (key = 133) {   // down arrow is pressed
                if (place = 1) {  //if on top left
                    do eraseMark();
                    let place = 3;
                    do markBox();
                }
                if (place = 2) {  // if on top right
                    do eraseMark();
                    let place = 4;
                    do markBox();
                }
            }

            if (key = 130) {    // left arrow is pressed
                if (place = 2) {    // if on top ridht
                    do eraseMark();
                    let place = 1;
                    do markBox();
                }
                if (place = 4) {    //if on bottom right
                    do eraseMark();
                    let place = 3;
                    do markBox();
                }            
            } 

            if (key = 132) {  // right arrow is pressed
                if (place = 1){
                    do eraseMark();
                    let place = 2;
                    do markBox();
                }
                if (place = 3){
                    do eraseMark();
                    let place = 4;
                    do markBox();
                    }
            }
            //   

            while (~(key = 0)) { // waits for the key to be released
                let key = Keyboard.keyPressed();
            }

            if (exit) {
                do menu.dispose();
                return;
            }

        }   
        return;
    }

    method void drawGrid() {
    
        do Screen.setColor(true);
        do Screen.drawRectangle(435, 40, 475, 240); // draw the scoreBar
        do Screen.setColor(false);
        do Screen.drawRectangle(437,40,473,238);
        do Screen.setColor(true);
        do Screen.drawRectangle(34, 40, 403, 130); // draw the question box
        do clearQuestion();
        //distance between top and bottom = 1216
        //distance between left and right = 12
        do clearAnswers();

        do anim.drawTopLeft(4801); // -512-1 2 rows up , 1 left
        do anim.drawTopRight(4813); // -512-1 2 rows up , 1 left
        do anim.drawBottomLeft(6017);   
        do anim.drawBottomRight(6029);

        do Output.moveCursor(20,60);  //draw scores nex to score bar
        do Output.printString("1k");
        do Output.moveCursor(18,60);
        do Output.printString("5K");
        do Output.moveCursor(16,60);
        do Output.printString("10K");
        do Output.moveCursor(14,60);
        do Output.printString("50K");
        do Output.moveCursor(12,60);
        do Output.printString("100K");
        do Output.moveCursor(10,60);
        do Output.printString("200K");
        do Output.moveCursor(8,60);
        do Output.printString("300K");
        do Output.moveCursor(6,60);
        do Output.printString("500K");
        do Output.moveCursor(4,60);
        do Output.printString("1M");         
        return;
    }

    method void clearQuestion() {
        do Screen.setColor(false);
        do Screen.drawRectangle(36,42,401,128); // inner white rectangle
        return;
    }

    method void clearAnswers() {
        do anim.draw(5088); // top left box   line num *32  start from 16384 = (0,0)
        do anim.draw(5101); // top right box    animation size 192x32
        do anim.draw(6592); // bottom left box
        do anim.draw(6605); // bottom right box
        return;
    }

    method void eraseMark() {
        if (place = 1){do anim.eraseLeftTopBox();}
        if (place = 2){do anim.eraseRightTopBox();}
        if (place = 3){do anim.eraseLeftBottomBox();}
        if (place = 4){do anim.eraseRightBottomBox();}
        return;
    }
    method void markBox() {
        if (place = 1){do anim.markLeftTopBox();}
        if (place = 2){do anim.markRightTopBox();}
        if (place = 3){do anim.markLeftBottomBox();}
        if (place = 4){do anim.markRightBottomBox();}
        return;
    }

    // method to check if question was already displayed on screen and user answered it.
    // if so, don't display the question again.
    method boolean wasAsked(int index) {
        var int i;

        let i = 0;
        while (i < list.getSize()) { // loop over askedQuestions array (same size as list.getSize(). For some reason the array class has no getSize() method for itself
            if (askedQuestions[i] = index) {
                return true;
            }
            if (askedQuestions[i] = null) { // no need to continue iterating if first null encountered as question was not asked
                return false;
            }
            let i = i + 1;
        }
        return false;
    }


    // method to update the score bar on the right side of the game screen every time a user has answered correctly
    method void scoreBarUpdate() {
        var int bar;
        if (score < 10){
            let bar = (score * 20);
            do Screen.setColor(true);
            do Screen.drawRectangle(435, (240 - bar), 475, 240); // black rectangle  435, 40, 475, 240
        }

        return;
    }

    // player finished a game (won or lost)
    method void gameOver() {
        var char key;
        var boolean returnedToMenu;
        
        let returnedToMenu = false;
        do Screen.clearScreen();

        do Output.moveCursor(3,28);
        if (score = 9) {
            do Output.printString("You Won!");
        } else {
            do Output.printString("Game Over");
        }
        do Output.moveCursor(8,1);
        do Output.printString("You earned ");
        if (score = 0) { // manually print score as 0 as it starts from 1 to work with our power method
            do Output.printInt(0);
        } else {
            do Output.printString(printScore(score));

        }
        do Output.printString("$!");
        do Output.moveCursor(9,1);
        do Output.printString("And answered ");
        do Output.printInt(askedQuestionsIndex);

        if (askedQuestionsIndex = 1) {
            do Output.printString(" question correctly.");
        } else {
            do Output.printString(" questions correctly.");
        }

        do Output.moveCursor(13,1);
        if (score > 8) {
            do Output.printString("Congrats on becoming a millionaire!");
        } else {
            do Output.printString("We had high expectations for you..");
            do Output.moveCursor(14,1);
            do Output.printString("and we were let down.");
        }

        do Output.moveCursor(21,18);
        do Output.printString("Press 'Enter' to return to menu.");

        while (key = 0) {
            let key = Keyboard.keyPressed();
        }

        while (~returnedToMenu) {
            if (key = 128) {
                let score = 0;
                do Screen.clearScreen();
                do run();
            }
        }

        return;
    }

    // a workaround method as we can't print to output integers > 30k
    method String printScore(int s) {
        var String res;

        if (s = 1) {
            let res = "1,000";
        }
        if (s = 2) {
            let res = "5,000";
        }
        if (s = 3) {
            let res = "10,000";
        }
        if (s = 4) {
            let res = "50,000";
        }
        if (s = 5) {
            let res = "100,000";
        }
        if (s = 6) {
            let res = "200,000";
        }
        if (s = 7) {
            let res = "300,000";
        }
        if (s = 8) {
            let res = "500,000";
        }
        if (s = 9) {
            let res = "1,000,000";
        }

        return res;
    }
}