// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {

    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // x methods
    Mux16(a= x, b= false, sel=zx, out=zeroxOut);
    Not16(in= zeroxOut, out= notx);
    Mux16(a= zeroxOut, b= notx, sel= nx, out= outx);

    // y methods
    Mux16(a= y, b= false, sel=zy, out=zeroyOut);
    Not16(in= zeroyOut, out= noty);
    Mux16(a= zeroyOut, b= noty, sel= ny, out= outy);

    // methods manipulation bits in x,y
    // x+y and x&y depending on f
    Add16(a = outx, b = outy, out = sumxy);
    And16(a= outx, b= outy, out= andxy);
    Mux16(a= andxy, b= sumxy, sel= f, out= outf);

    // no method
    Not16(in= outf, out= notoutf);
    Mux16(a= outf, b= notoutf, sel= no, out= out, out[15]=ng, out[0..7]=outFirst, out[8..15]=outSecond);
    // out[15] = ng because using two's complement
    // if the number is negative (meaning lower than 0),
    // the MSB is going to be equal to 1. By line 42,
    // ng should be equal to 1 and so by equating it to
    // the MSB, we get that exact result.

    // Now, by line 16, we need to check if the output
    // equals 0. we need to check the whole array (so that
    // every bit is 0). we can get the desired output by
    // using Or16way, but we didn't implement this
    // so we will use Or8way. To do that, we will split
    // the array to 2 8 bit arrays.
    Or8Way(in= outFirst, out= zrone);
    Or8Way(in= outSecond, out= zrtwo);
    Or(a= zrone, b= zrtwo, out= zrfinal);
    Not(in= zrfinal, out= zr);
}